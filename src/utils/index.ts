import _ from 'lodash'
import { format } from 'date-fns'
import { t } from 'i18next'

/** H√†m x√≥a d·∫•u ti·∫øng vi·ªát
 * @param str chuo·ªãc x√≥a
 */
export const removeVietnameseTones = str => {
  return str
    .normalize('NFD')
    .replace(/[ÃÄ-ÕØ]/g, '')
    .replace(/ƒë/g, 'd')
    .replace(/ƒê/g, 'D')
    .toLowerCase()
}
/**
 * M√°p gi√° tr·ªã c·∫£m x√∫c
 */
const EMOTION_MAP = {
  client_emotion_happy: 'client_emotion_happy',
  client_emotion_sad: 'client_emotion_sad',
  client_emotion_angry: 'client_emotion_angry',
  client_emotion_fear: 'client_emotion_fear',
  client_emotion_surprise: 'client_emotion_surprise',
  client_emotion_disgust: 'client_emotion_disgust',
  client_emotion_love: 'client_emotion_love',
  client_emotion_jealousy: 'client_emotion_jealousy',
  client_emotion_shame: 'client_emotion_shame',
  client_emotion_pride: 'client_emotion_pride',
  client_emotion_none: 'client_emotion_none',
  client_emotion_like: 'client_emotion_like',
}
/** H√†m x·ª≠ l√Ω c·∫£m x√∫c
 * @param emotion gi√° tr·ªã c·∫£m x√∫c
 */
export const renderEmotion = (emotion: string) => {
  return t(EMOTION_MAP[emotion] || 'client_emotion_none')
}

/** Emotion key map */
const EMOTION_KEY_MAP = {
  'üòä Vui v·∫ª': 'client_emotion_happy',
  'üòä Happy': 'client_emotion_happy',
  'üò¢ Bu·ªìn b√£': 'client_emotion_sad',
  'üò¢ Sad': 'client_emotion_sad',
  'üò± S·ª£ h√£i': 'client_emotion_fear',
  'üò± Fear': 'client_emotion_fear',
  'üò° Gi·∫≠n d·ªØ': 'client_emotion_angry',
  'üò° Angry': 'client_emotion_angry',
  'üò≤ Ng·∫°c nhi√™n': 'client_emotion_surprise',
  'üò≤ Surprise': 'client_emotion_surprise',
  'ü§¢ Gh√™ t·ªüm': 'client_emotion_disgust',
  'ü§¢ Disgust': 'client_emotion_disgust',
  '‚ù§Ô∏è Y√™u th∆∞∆°ng': 'client_emotion_love',
  '‚ù§Ô∏è Love': 'client_emotion_love',
  'üòí Ghen t·ªã': 'client_emotion_jealousy',
  'üòí Jealousy': 'client_emotion_jealousy',
  'üò≥ X·∫•u h·ªï': 'client_emotion_shame',
  'üò≥ Shame': 'client_emotion_shame',
  'üòå T·ª± h√†o': 'client_emotion_pride',
  'üòå Pride': 'client_emotion_pride',
  'ü§î Kh√¥ng r√µ': 'client_emotion_none',
  'ü§î Unknown': 'client_emotion_none',
  'üëç Th√≠ch': 'client_emotion_like',
  'üëç Like': 'client_emotion_like',
}

/**
 *  H√†m x·ª≠ l√Ω c·∫£m x√∫c
 * @param emotion gi√° tr·ªã c·∫£m x√∫c
 * @returns
 */
export const renderKeyEmotion = (emotion: string) => {
  return EMOTION_KEY_MAP[emotion] || 'client_emotion_none'
}

/** M√°p gi√° tr·ªã s·∫£n ph·∫©m */
const ACTION_MAP = {
  product_quality: 'product_quality',
  delivery_issues: 'delivery_issues',
  customer_service: 'customer_service',
  pricing_concerns: 'pricing_concerns',
  technical_issues: 'technical_issues',
  refund_request: 'refund_request',
  other: 'other',
}

/** H√†m x·ª≠ l√Ω h√†nh ƒë·ªông
 * @param action gi√° tr·ªã h√†nh ƒë·ªông
 */
export const renderAction = (action: string) => {
  return t(ACTION_MAP[action] || 'other')
}
/**
 * M√°p gi√° tr·ªã h√†nh ƒë·ªông
 */
const ACTION_KEY_MAP = {
  'Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m': 'product_quality',
  'Product Quality': 'product_quality',
  'Giao h√†ng': 'delivery_issues',
  'Delivery Issues': 'delivery_issues',
  'D·ªãch v·ª• kh√°ch h√†ng': 'customer_service',
  'Customer Service': 'customer_service',
  Gi√°: 'pricing_concerns',
  'Pricing Concerns': 'pricing_concerns',
  'K·ªπ thu·∫≠t': 'technical_issues',
  'Technical Issues': 'technical_issues',
  'Ho√†n ti·ªÅn': 'refund_request',
  'Refund Request': 'refund_request',
  Kh√°c: 'other',
  Other: 'other',
}

/**
 *  H√†m x·ª≠ l√Ω h√†nh ƒë·ªông
 * @param action gi√° tr·ªã h√†nh ƒë·ªông
 * @returns
 */
export const renderKeyAction = (action: string) => {
  return ACTION_KEY_MAP[action] || 'other'
}
/**
 * M√°p gi√° tr·ªã h√†nh ƒë·ªông
 */
const SUGGESTED_MAP = {
  apologize_customer: 'apologize_customer',
  improve_support: 'improve_support',
  investigate_issue: 'investigate_issue',
  update_customer: 'update_customer',
  enhance_training: 'enhance_training',
  maintain_quality: 'maintain_quality',
  other: 'other',
}
/**
 *  H√†m x·ª≠ l√Ω h√†nh ƒë·ªông
 * @param action  gi√° tr·ªã h√†nh ƒë·ªông
 * @returns
 */
export const renderSuggest = (action: string) => {
  return t(SUGGESTED_MAP[action] || 'other')
}
/**
 * M√°p gi√° tr·ªã h√†nh ƒë·ªông
 */
const SUGGEST_KEY_MAP = {
  'Xin l·ªói kh√°ch h√†ng': 'apologize_customer',
  'C·∫£i thi·ªán d·ªãch v·ª• CSKH': 'improve_support',
  'ƒêi·ªÅu tra nguy√™n nh√¢n v·∫•n ƒë·ªÅ': 'investigate_issue',
  'C·∫≠p nh·∫≠t ƒë∆°n h√†ng': 'update_customer',
  'ƒê√†o t·∫°o l·∫°i nh√¢n s·ª±': 'enhance_training',
  'N√¢ng cao ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m': 'maintain_quality',
  Kh√°c: 'other',
}
/**
 *  H√†m x·ª≠ l√Ω h√†nh ƒë·ªông
 * @param action gi√° tr·ªã h√†nh ƒë·ªông
 * @returns
 */
export const renderKeySuggest = (action: string) => {
  return SUGGEST_KEY_MAP[action] || 'other'
}

/**
 *  H√†m x·ª≠ l√Ω h√†nh ƒë·ªông
 * @param action
 * @returns
 */
export const renderTypeSuggest = (action: string) => {
  return action === 'action_required_false'
    ? 'Kh√¥ng c·∫ßn h√†nh ƒë·ªông'
    : 'C·∫ßn h√†nh ƒë·ªông'
}

/** Tag map */
const TAG_MAP = {
  client_positive: 'T√≠ch c·ª±c',
  client_neutral: 'Trung l·∫≠p',
  client_negative: 'Ti√™u c·ª±c',
}
/**
 *  H√†m x·ª≠ l√Ω tag
 * @param key
 * @returns
 */
export const renderTag = key => TAG_MAP[key] || 'Kh√¥ng x√°c ƒë·ªãnh'

/** Render conversation tag */
export const renderConversationTag = key => {
  return t(key)
}
/** Path map */
const PATH_MAP = {
  '/dashboard': 'overview',
  '/page': 'page',
  '/staff': 'staff',
  '/ads': 'ads',
  '/tags': 'tags',
  '/emotional': 'emotional',
}
/** H√†m x·ª≠ l√Ω t√™n trang hi·ªán t·∫°i */
export const renderPathName = key => {
  return t(PATH_MAP[key] || 'overview')
}

/**
 *  H√†m x·ª≠ l√Ω width size
 * @param index
 * @param value
 * @param size
 * @returns
 */
export function getWidthSize(index, value, size) {
  if (typeof window !== 'undefined' && window.innerWidth < 768 && index === 0) {
    if (value === 'action') return 180
    if (value === 'ads_id_column') return 150
    if (value === 'staff_id_column') return 135
  } else if (
    typeof window !== 'undefined' &&
    window.innerWidth >= 768 &&
    index === 0
  ) {
    return size
  }
  return size
}

/** H√†m x·ª≠ l√Ω th·ªùi gian
 * @param times
 * @param format_str
 */
export function formatDateTimeZones(times, format_str) {
  /** Parse the input time (assumed to be in UTC) */
  const UTC_DATE = new Date(times + 'Z')

  /** Convert to UTC+7 by adding 7 hours */
  const TIMEZONE_OFFSET = 7 * 60 * 60 * 1000
  /**
   *  X·ª≠ l√Ω th·ªùi gian
   */
  const ADJUSTED_DATE = new Date(UTC_DATE.getTime() + TIMEZONE_OFFSET)
  /** Gi·ªù */
  const HOURS = String(ADJUSTED_DATE.getUTCHours()).padStart(2, '0')
  /** Ph√∫t */
  const MINUTES = String(ADJUSTED_DATE.getUTCMinutes()).padStart(2, '0')
  /** Ng√†y */
  const DAY = String(ADJUSTED_DATE.getUTCDate()).padStart(2, '0')
  /** Th√°ng */
  const MONTH = String(ADJUSTED_DATE.getUTCMonth() + 1).padStart(2, '0')
  /** NƒÉm */
  const YEAR = ADJUSTED_DATE.getUTCFullYear()
  /** Replace the format with the adjusted values */
  return format_str
    .replace('HH', HOURS)
    .replace('mm', MINUTES)
    .replace('dd', DAY)
    .replace('MM', MONTH)
    .replace('yyyy', YEAR)
}

/**
 *  H√†m x·ª≠ l√Ω th·ªùi gian
 * @param date_string
 * @returns
 */
export function formatDateTime(date_string: string): string {
  /**
   * T·∫°o date t·ª´ chu·ªói th·ªùi gian
   */
  const DATE = new Date(date_string)
  /**
   * X·ª≠ l√Ω th·ªùi gian
   */
  return format(DATE, 'HH:mm dd/MM/yyyy ')
}
/**
 * Base url
 */
export const BASE_URL = import.meta.env.VITE_BASE_URL || '/'
/**
 *  H√†m x·ª≠ l√Ω render routes
 * @param path
 * @returns
 */
export const renderRoutes = path => `${BASE_URL}${path}`.replace(/\/\/+/, '/')

/**
 *  H√†m x·ª≠ Formats a number with commas
 * @param value
 * @param return_value
 * @returns
 */
export const formatWithCommas = (
  value: string | number,
  return_value?: boolean,
) => {
  /**
   * N·∫øu gi√° tr·ªã kh√¥ng t·ªìn t·∫°i th√¨ tr·∫£ v·ªÅ 0 ho·∫∑c '-'
   */
  if (!value) return return_value ? '0' : '-'
  /**
   * Chuy·ªÉn gi√° tr·ªã th√†nh chu·ªói, sau ƒë√≥ chuy·ªÉn d·∫•u ph·∫©y v√†o d·∫•u ch·∫•m
   */
  const NUM_VALUE = parseFloat(value.toString().replace(/\,/g, ''))
  /**
   * N·∫øu gi√° tr·ªã kh√¥ng ph·∫£i l√† s·ªë th√¨ tr·∫£ v·ªÅ chu·ªói r·ªóng
   */
  if (isNaN(NUM_VALUE)) return ''
  /**
   * Tr·∫£ v·ªÅ gi√° tr·ªã
   */
  return NUM_VALUE.toLocaleString('en-US')
}
/**
 * H√†m sao ch√©p vƒÉn b·∫£n v√†o clipboard v√† hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
 * @param text VƒÉn b·∫£n c·∫ßn sao ch√©p
 * @param onError Callback khi sao ch√©p th·∫•t b·∫°i (t√πy ch·ªçn)
 */
export function copyToClipboard(text: string, onError?: (error: any) => void) {
  /** Ki·ªÉm tra n·∫øu tr√¨nh duy·ªát h·ªó tr·ª£ Clipboard API */
  if (navigator.clipboard) {
    navigator.clipboard
      .writeText(text)
      .then(() => {
        showSuccessMessage('ƒê√£ sao ch√©p th√†nh c√¥ng!')
      })
      .catch(error => {
        console.error('L·ªói khi sao ch√©p:', error)
        onError && onError(error)
      })
  } else {
    /** Tr∆∞·ªùng h·ª£p tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Clipboard API, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c≈© */
    try {
      /** ƒê·ªãnh nghƒ©a textArea ·ªü ƒë√¢y */
      const TEXT_AREA = document.createElement('textarea')
      /**
       * G√°n gi√° tr·ªã text v√†o textArea
       */
      TEXT_AREA.value = text
      /** ƒê·∫£m b·∫£o ph·∫ßn t·ª≠ n√†y kh√¥ng hi·ªÉn th·ªã tr√™n m√†n h√¨nh */
      TEXT_AREA.style.position = 'fixed'
      /**
       * ƒê·∫£m b·∫£o ph·∫ßn t·ª≠ n√†y kh√¥ng hi·ªÉn th·ªã tr
       */
      TEXT_AREA.style.opacity = '0'
      /**
       * Th√™m textArea v√†o body
       */
      document.body.appendChild(TEXT_AREA)
      /**
       * Focus v√†o textArea
       */
      TEXT_AREA.focus()
      /**
       * Ch·ªçn to√†n b·ªô vƒÉn b·∫£n trong textArea
       */
      TEXT_AREA.select()
      /**
       * Th·ª≠ sao ch√©p vƒÉn b·∫£n v√†o clipboard
       */
      const SUCCESSFUL = document.execCommand('copy')
      /**
       * Ki·ªÉm tra xem sao ch√©p c√≥ th√†nh c√¥ng kh√¥ng
       */
      if (SUCCESSFUL) {
        /**
         * Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
         */
        showSuccessMessage('ƒê√£ sao ch√©p th√†nh c√¥ng!')
      } else {
        throw new Error('Kh√¥ng th·ªÉ sao ch√©p')
      }
    } catch (error) {
      console.error('L·ªói khi sao ch√©p:', error)
      onError && onError(error)
    } finally {
      /** Ki·ªÉm tra n·∫øu textArea ƒë√£ ƒë∆∞·ª£c th√™m v√†o DOM th√¨ x√≥a n√≥ ƒëi */
      const TEXT_ARE = document.querySelector('textarea')
      /**
       * Ki·ªÉm tra n·∫øu textArea ƒë√£ ƒë∆∞·ª£c th√™m v√†o DOM th√¨ x√≥a n√≥ ƒëi
       */
      if (TEXT_ARE) {
        document.body.removeChild(TEXT_ARE)
      }
    }
  }
}
/**
 * H√†m hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng d·∫°ng absolute
 * @param message N·ªôi dung th√¥ng b√°o
 */
function showSuccessMessage(message: string) {
  /**
   * T·∫°o element div ƒë·ªÉ ch·ª©a th√¥ng b√°o
   */
  const MESSAGE_ELEMENT = document.createElement('div')
  /**
   * Th√™m style cho element
   */
  MESSAGE_ELEMENT.textContent = message
  MESSAGE_ELEMENT.style.position = 'absolute'
  MESSAGE_ELEMENT.style.bottom = '20px'
  MESSAGE_ELEMENT.style.right = '20px'
  MESSAGE_ELEMENT.style.backgroundColor = '#4caf50'
  MESSAGE_ELEMENT.style.color = '#fff'
  MESSAGE_ELEMENT.style.padding = '10px 20px'
  MESSAGE_ELEMENT.style.borderRadius = '5px'
  MESSAGE_ELEMENT.style.boxShadow = '0 2px 5px rgba(0, 0, 0, 0.2)'
  MESSAGE_ELEMENT.style.zIndex = '1000'
  MESSAGE_ELEMENT.style.transition = 'opacity 0.5s'
  /**
   * Th√™m element v√†o body
   */
  document.body.appendChild(MESSAGE_ELEMENT)

  /** T·ª± ƒë·ªông ·∫©n sau 3 gi√¢y */
  setTimeout(() => {
    /**
     * Thay ƒë·ªïi opacity c·ªßa element ƒë·ªÉ ·∫©n ƒëi
     */
    MESSAGE_ELEMENT.style.opacity = '0'
    setTimeout(() => {
      /**
       * X√≥a element kh·ªèi DOM
       */
      document.body.removeChild(MESSAGE_ELEMENT)
    }, 500)
  }, 2000)
}

interface StaffEvent {
  event_count: string
  total_value: number
}

interface StaffData {
  [key: string]: StaffEvent | undefined
}

interface AllStaffData {
  [staffId: string]: StaffData
}

interface Summary {
  staff_miss_call_in_hours: number
  staff_miss_call_out_hours: number
  staff_miss_response_in_hours: number
  staff_miss_response_out_hours: number
}

const fieldsToSum: (keyof Summary)[] = [
  'staff_miss_call_in_hours',
  'staff_miss_call_out_hours',
  'staff_miss_response_in_hours',
  'staff_miss_response_out_hours',
]

export const aggregateStaffData = (data: AllStaffData): Summary => {
  return _.reduce(
    data,
    (summary, staffData) => {
      _.forEach(fieldsToSum, field => {
        const value = _.get(staffData, [field, 'total_value'], 0) as number
        summary[field] += value
      })
      return summary
    },
    {
      staff_miss_call_in_hours: 0,
      staff_miss_call_out_hours: 0,
      staff_miss_response_in_hours: 0,
      staff_miss_response_out_hours: 0,
    } as Summary,
  )
}
